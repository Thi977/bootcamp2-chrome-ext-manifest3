name: CI - Build, Test e Release da Extensão

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main

jobs:
  build_and_test:
    runs-on: ubuntu-latest

    steps:
      # 1. Baixa o código do repositório
      - name: Checkout do código
        uses: actions/checkout@v4

      # 2. Constrói a imagem Docker (baseada no nosso Dockerfile)
      # Isso instala npm deps, playwright e roda o build-extension.mjs
      - name: Build da Imagem Docker
        run: docker build -t focus-tracker-ci .

      # 3. Executa os Testes E2E
      # Nós rodamos a imagem que acabamos de construir.
      # O comando usa xvfb-run + headless:false (como depuramos)
      # Montamos volumes para "resgatar" os artefatos (relatório e zip)
      - name: Rodar Testes E2E (com Xvfb)
        run: |
          docker run --rm --ipc=host \
            -v ./playwright-report:/app/playwright-report \
            -v ./dist:/app/dist \
            focus-tracker-ci xvfb-run -a npm run test

      # 4. Publica o Relatório HTML do Playwright
      # Isso só acontece se o job falhar (testes quebraram) ou
      # se sempre for executado (always())
      - name: Upload do Relatório de Testes
        uses: actions/upload-artifact@v4
        if: always() # Publica mesmo se os testes falharem
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 7

      # 5. Publica o .zip da Extensão
      # Isso só deve acontecer se os testes passarem (success())
      - name: Upload do .zip da Extensão
        uses: actions/upload-artifact@v4
        if: success()
        with:
          name: extension-zip
          path: dist/extension.zip
          retention-days: 30

  # (Opcional, mas recomendado) Job para criar um Release
  create_release:
    # Só roda se o 'build_and_test' passar E for na branch 'main'
    if: github.ref == 'refs/heads/main' && needs.build_and_test.outputs.status == 'success'
    needs: build_and_test
    runs-on: ubuntu-latest

    # O job 'build_and_test' precisa de um 'output' para isso funcionar
    # (Adição simples, mas vamos pular por agora para simplificar)
    # Por agora, vamos assumir que se chegou aqui, passou.

    steps:
      - name: Download do .zip da Extensão
        uses: actions/download-artifact@v4
        with:
          name: extension-zip
          path: .

      - name: Criar Release no GitHub
        uses: softprops/action-gh-release@v2
        with:
          # Gera um nome de tag baseado na data, ex: v2025.10.19-2359
          tag_name: v${{ env.RELEASE_VERSION }}
          name: Release ${{ env.RELEASE_VERSION }}
          files: extension.zip
        env:
          RELEASE_VERSION: $(date +'%Y.%m.%d-%H%M')
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
